rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for authentication and data validation
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidUserData() {
      return request.resource.data.keys().hasAll(['displayName', 'auraPoints', 'createdAt', 'updatedAt']) &&
             request.resource.data.displayName is string &&
             request.resource.data.auraPoints is int &&
             request.resource.data.createdAt is timestamp &&
             request.resource.data.updatedAt is timestamp;
    }
    
    function isValidEventData() {
      return request.resource.data.keys().hasAll(['title', 'hostId', 'latitude', 'longitude', 'radiusMeters', 'createdAt', 'updatedAt']) &&
             request.resource.data.title is string &&
             request.resource.data.hostId is string &&
             request.resource.data.latitude is number &&
             request.resource.data.longitude is number &&
             request.resource.data.radiusMeters is number &&
             request.resource.data.createdAt is timestamp &&
             request.resource.data.updatedAt is timestamp;
    }
    
    function isValidSignalData() {
      return request.resource.data.keys().hasAll(['userId', 'eventId', 'signalStrength', 'createdAt', 'updatedAt']) &&
             request.resource.data.userId is string &&
             request.resource.data.eventId is string &&
             request.resource.data.signalStrength is int &&
             request.resource.data.createdAt is timestamp &&
             request.resource.data.updatedAt is timestamp;
    }
    
    function isValidPointData() {
      return request.resource.data.keys().hasAll(['userId', 'points', 'reason', 'createdAt', 'updatedAt']) &&
             request.resource.data.userId is string &&
             request.resource.data.points is int &&
             request.resource.data.reason is string &&
             request.resource.data.createdAt is timestamp &&
             request.resource.data.updatedAt is timestamp;
    }

    // Users collection rules
    match /users/{userId} {
      // Users can read their own profile
      allow read: if isOwner(userId);
      
      // Users can create their own profile
      allow create: if isOwner(userId) && isValidUserData();
      
      // Users can update their own profile
      allow update: if isOwner(userId) && isValidUserData();
      
      // Users can delete their own profile
      allow delete: if isOwner(userId);
    }

    // Events collection rules
    match /events/{eventId} {
      // Anyone can read events (for public event discovery)
      allow read: if isAuthenticated();
      
      // Only authenticated users can create events
      allow create: if isAuthenticated() && isValidEventData();
      
      // Only the event host can update their events
      allow update: if isAuthenticated() && 
                       resource.data.hostId == request.auth.uid &&
                       isValidEventData();
      
      // Only the event host can delete their events
      allow delete: if isAuthenticated() && 
                       resource.data.hostId == request.auth.uid;
    }

    // Signals collection rules
    match /signals/{signalId} {
      // Users can read signals for events they're participating in
      allow read: if isAuthenticated();
      
      // Users can create signals for themselves
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       isValidSignalData();
      
      // Users can update their own signals
      allow update: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid &&
                       isValidSignalData();
      
      // Users can delete their own signals
      allow delete: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid;
    }

    // Points collection rules
    match /points/{pointId} {
      // Users can read their own points
      allow read: if isOwner(resource.data.userId);
      
      // System can create points (via Cloud Functions)
      allow create: if isValidPointData();
      
      // System can update points (via Cloud Functions)
      allow update: if isValidPointData();
      
      // Points are typically not deleted, but allow system deletion
      allow delete: if false; // Prevent manual deletion of points
    }
  }
}
